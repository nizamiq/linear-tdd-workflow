name: Claude Agentic Workflow CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        test-suite: [unit, integration, e2e]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        npm ci
        pip install flake8 pytest

    - name: Run linting
      run: |
        npm run lint:check
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run unit tests
      if: matrix.test-suite == 'unit'
      run: |
        npm run test:unit

    - name: Run integration tests
      if: matrix.test-suite == 'integration'
      run: |
        npm run test:integration

    - name: Run E2E tests with memory monitoring
      if: matrix.test-suite == 'e2e'
      run: |
        # Run E2E tests with memory limits
        ulimit -v 524288  # 512MB virtual memory limit
        npm run test:e2e

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.test-suite }}
        path: |
          test-results/
          coverage/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: |
        npm audit --audit-level high

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  memory-safety-test:
    name: Memory Safety Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run memory safety tests
      run: |
        # Test memory-safe router under stress
        node test-memory-safe-router.js

    - name: Validate memory consumption
      run: |
        # Run comprehensive memory validation
        node validate-memory-fix.js

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, security-scan, memory-safety-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Package for deployment
      run: |
        tar -czf linear-tdd-workflow-${{ github.sha }}.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=tests \
          .

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: linear-tdd-workflow-${{ github.sha }}.tar.gz

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'

    environment:
      name: staging
      url: https://staging.linear-tdd-workflow.com

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: deployment-package

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment script here

    - name: Run staging smoke tests
      run: |
        echo "Running staging smoke tests..."
        # Add staging smoke tests

    - name: Notify deployment
      if: always()
      run: |
        echo "Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://linear-tdd-workflow.com

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: deployment-package

    - name: Blue-Green Deployment
      run: |
        echo "Starting blue-green deployment..."
        # Blue-green deployment script

    - name: Health check
      run: |
        echo "Running production health checks..."
        # Production health checks

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, rolling back..."
        # Rollback script

    - name: Notify success
      if: success()
      run: |
        echo "Production deployment successful"