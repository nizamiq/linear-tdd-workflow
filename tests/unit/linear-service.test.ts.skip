// @note SKIPPED: linear-service module not yet implemented (planned for v1.5.0)
// import { LinearService } from '../../src/services/linear-service';
import { LinearClient } from '@linear/sdk';

jest.mock('@linear/sdk');

describe.skip('LinearService', () => {
  // let linearService: LinearService;
  // let mockLinearClient: jest.Mocked<LinearClient>;

  beforeEach(() => {
    mockLinearClient = new LinearClient({ apiKey: 'test-api-key' }) as jest.Mocked<LinearClient>;
    linearService = new LinearService('test-api-key');
    (linearService as unknown as { client: jest.Mocked<LinearClient> }).client = mockLinearClient;
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('createIssue', () => {
    it('should create an issue successfully', async () => {
      const mockIssue = {
        id: 'issue-123',
        title: 'Test Issue',
        description: 'Test Description',
        state: { name: 'Todo' }
      };

      mockLinearClient.createIssue = jest.fn().mockResolvedValue({
        success: true,
        issue: mockIssue
      });

      const result = await linearService.createIssue({
        title: 'Test Issue',
        description: 'Test Description',
        teamId: 'team-123'
      });

      expect(result).toEqual({
        success: true,
        issue: mockIssue
      });
      expect(mockLinearClient.createIssue).toHaveBeenCalledWith({
        title: 'Test Issue',
        description: 'Test Description',
        teamId: 'team-123'
      });
    });

    it('should handle errors when creating an issue', async () => {
      mockLinearClient.createIssue = jest.fn().mockRejectedValue(
        new Error('API Error')
      );

      await expect(linearService.createIssue({
        title: 'Test Issue',
        description: 'Test Description',
        teamId: 'team-123'
      })).rejects.toThrow('Failed to create Linear issue: API Error');
    });

    it('should validate required fields', async () => {
      await expect(linearService.createIssue({
        title: '',
        description: 'Test Description',
        teamId: 'team-123'
      })).rejects.toThrow('Title is required');
    });
  });

  describe('updateIssue', () => {
    it('should update an issue successfully', async () => {
      mockLinearClient.updateIssue = jest.fn().mockResolvedValue({
        success: true
      });

      const result = await linearService.updateIssue('issue-123', {
        title: 'Updated Title'
      });

      expect(result).toEqual({ success: true });
      expect(mockLinearClient.updateIssue).toHaveBeenCalledWith('issue-123', {
        title: 'Updated Title'
      });
    });
  });

  describe('getIssue', () => {
    it('should retrieve an issue by ID', async () => {
      const mockIssue = {
        id: 'issue-123',
        title: 'Test Issue',
        state: { name: 'In Progress' }
      };

      mockLinearClient.issue = jest.fn().mockResolvedValue(mockIssue);

      const result = await linearService.getIssue('issue-123');

      expect(result).toEqual(mockIssue);
      expect(mockLinearClient.issue).toHaveBeenCalledWith('issue-123');
    });

    it('should handle non-existent issues', async () => {
      mockLinearClient.issue = jest.fn().mockResolvedValue(null);

      await expect(linearService.getIssue('non-existent')).rejects.toThrow(
        'Issue not found: non-existent'
      );
    });
  });
});